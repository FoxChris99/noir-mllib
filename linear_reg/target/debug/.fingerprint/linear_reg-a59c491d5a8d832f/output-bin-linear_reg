{"message":"this method takes 6 arguments but 5 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":2709,"byte_end":4670,"line_start":78,"line_end":120,"column_start":16,"column_end":10,"is_primary":false,"text":[{"text":"        .replay(","highlight_start":16,"highlight_end":17},{"text":"            num_iters,","highlight_start":1,"highlight_end":23},{"text":"            initial_state,","highlight_start":1,"highlight_end":27},{"text":"            |s, state| {","highlight_start":1,"highlight_end":25},{"text":"               s.shuffle().rich_filter_map({","highlight_start":1,"highlight_end":45},{"text":"                let mut count = 0;","highlight_start":1,"highlight_end":35},{"text":"                move |x|{","highlight_start":1,"highlight_end":26},{"text":"                    count+=1;","highlight_start":1,"highlight_end":30},{"text":"                    if count<=batch_size { Some(x) }","highlight_start":1,"highlight_end":53},{"text":"                    else{ None }","highlight_start":1,"highlight_end":33},{"text":"                }})","highlight_start":1,"highlight_end":20},{"text":"               .rich_map({","highlight_start":1,"highlight_end":27},{"text":"                    move |x|{","highlight_start":1,"highlight_end":30},{"text":"                        let sample_grad;","highlight_start":1,"highlight_end":41},{"text":"                        if let Some(y)=x.pop(){ ","highlight_start":1,"highlight_end":49},{"text":"                            x.push(1.);","highlight_start":1,"highlight_end":40},{"text":"                            let current_weights = &state.get().weights;","highlight_start":1,"highlight_end":72},{"text":"                            let prediction: f64 = x.iter().zip(current_weights.iter()).map(|(a, b)| a * b).sum();","highlight_start":1,"highlight_end":114},{"text":"                            let error = y-prediction;","highlight_start":1,"highlight_end":54},{"text":"                            sample_grad = x.iter().map(|v| v * error).collect();","highlight_start":1,"highlight_end":81},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        sample_grad","highlight_start":1,"highlight_end":36},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                })","highlight_start":1,"highlight_end":19},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            |local_grad: &mut Vec<f64>, sample_grad| {","highlight_start":1,"highlight_end":55},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                local_grad.extend(vec![0.; sample_grad.len()]);","highlight_start":1,"highlight_end":64},{"text":"                *local_grad = local_grad.iter().zip(sample_grad.iter()).map(|(a, b)| (a + b)).collect();","highlight_start":1,"highlight_end":105},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            move |state, mut local_grad| {","highlight_start":1,"highlight_end":43},{"text":"                //state = somma di update di ogni replica/ replica","highlight_start":1,"highlight_end":67},{"text":"                state.iter_count +=1;","highlight_start":1,"highlight_end":38},{"text":"                //each iteration the global_grad must be set to 0 because we must do the cumulative sum of the local gradients","highlight_start":1,"highlight_end":127},{"text":"                state.global_grad = vec![0.;local_grad.len()];","highlight_start":1,"highlight_end":63},{"text":"                let num_replica = 1; //?????????????????","highlight_start":1,"highlight_end":57},{"text":"                state.global_grad = state.global_grad.iter().zip(local_grad.iter()).map(|(a, b)| (a + b)/(batch_size * num_replica) as f64).collect();","highlight_start":1,"highlight_end":151},{"text":"                state.weights = state.weights.iter().zip(state.global_grad.iter()).map(|(beta, g)| beta - g * learn_rate).collect();","highlight_start":1,"highlight_end":133},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        )","highlight_start":1,"highlight_end":10}],"label":"an argument is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":2703,"byte_end":2709,"line_start":78,"line_end":78,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"        .replay(","highlight_start":10,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\foxfo\\.cargo\\git\\checkouts\\noir-7e40c96ce7738426\\013b336\\src\\operator\\iteration\\replay.rs","byte_start":9752,"byte_end":9758,"line_start":254,"line_end":254,"column_start":12,"column_end":18,"is_primary":true,"text":[{"text":"    pub fn replay<","highlight_start":12,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":2709,"byte_end":4670,"line_start":78,"line_end":120,"column_start":16,"column_end":10,"is_primary":true,"text":[{"text":"        .replay(","highlight_start":16,"highlight_end":17},{"text":"            num_iters,","highlight_start":1,"highlight_end":23},{"text":"            initial_state,","highlight_start":1,"highlight_end":27},{"text":"            |s, state| {","highlight_start":1,"highlight_end":25},{"text":"               s.shuffle().rich_filter_map({","highlight_start":1,"highlight_end":45},{"text":"                let mut count = 0;","highlight_start":1,"highlight_end":35},{"text":"                move |x|{","highlight_start":1,"highlight_end":26},{"text":"                    count+=1;","highlight_start":1,"highlight_end":30},{"text":"                    if count<=batch_size { Some(x) }","highlight_start":1,"highlight_end":53},{"text":"                    else{ None }","highlight_start":1,"highlight_end":33},{"text":"                }})","highlight_start":1,"highlight_end":20},{"text":"               .rich_map({","highlight_start":1,"highlight_end":27},{"text":"                    move |x|{","highlight_start":1,"highlight_end":30},{"text":"                        let sample_grad;","highlight_start":1,"highlight_end":41},{"text":"                        if let Some(y)=x.pop(){ ","highlight_start":1,"highlight_end":49},{"text":"                            x.push(1.);","highlight_start":1,"highlight_end":40},{"text":"                            let current_weights = &state.get().weights;","highlight_start":1,"highlight_end":72},{"text":"                            let prediction: f64 = x.iter().zip(current_weights.iter()).map(|(a, b)| a * b).sum();","highlight_start":1,"highlight_end":114},{"text":"                            let error = y-prediction;","highlight_start":1,"highlight_end":54},{"text":"                            sample_grad = x.iter().map(|v| v * error).collect();","highlight_start":1,"highlight_end":81},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        sample_grad","highlight_start":1,"highlight_end":36},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                })","highlight_start":1,"highlight_end":19},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            |local_grad: &mut Vec<f64>, sample_grad| {","highlight_start":1,"highlight_end":55},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                local_grad.extend(vec![0.; sample_grad.len()]);","highlight_start":1,"highlight_end":64},{"text":"                *local_grad = local_grad.iter().zip(sample_grad.iter()).map(|(a, b)| (a + b)).collect();","highlight_start":1,"highlight_end":105},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            move |state, mut local_grad| {","highlight_start":1,"highlight_end":43},{"text":"                //state = somma di update di ogni replica/ replica","highlight_start":1,"highlight_end":67},{"text":"                state.iter_count +=1;","highlight_start":1,"highlight_end":38},{"text":"                //each iteration the global_grad must be set to 0 because we must do the cumulative sum of the local gradients","highlight_start":1,"highlight_end":127},{"text":"                state.global_grad = vec![0.;local_grad.len()];","highlight_start":1,"highlight_end":63},{"text":"                let num_replica = 1; //?????????????????","highlight_start":1,"highlight_end":57},{"text":"                state.global_grad = state.global_grad.iter().zip(local_grad.iter()).map(|(a, b)| (a + b)/(batch_size * num_replica) as f64).collect();","highlight_start":1,"highlight_end":151},{"text":"                state.weights = state.weights.iter().zip(state.global_grad.iter()).map(|(beta, g)| beta - g * learn_rate).collect();","highlight_start":1,"highlight_end":133},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        )","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"(num_iters, initial_state, |s, state| {\n               s.shuffle().rich_filter_map({\n                let mut count = 0;\n                move |x|{\n                    count+=1;\n                    if count<=batch_size { Some(x) }\n                    else{ None }\n                }})\n               .rich_map({\n                    move |x|{\n                        let sample_grad;\n                        if let Some(y)=x.pop(){ \n                            x.push(1.);\n                            let current_weights = &state.get().weights;\n                            let prediction: f64 = x.iter().zip(current_weights.iter()).map(|(a, b)| a * b).sum();\n                            let error = y-prediction;\n                            sample_grad = x.iter().map(|v| v * error).collect();\n                        }\n                        sample_grad\n                    }\n                })\n            }, |local_grad: &mut Vec<f64>, sample_grad| {\n                \n                local_grad.extend(vec![0.; sample_grad.len()]);\n                *local_grad = local_grad.iter().zip(sample_grad.iter()).map(|(a, b)| (a + b)).collect();\n            }, move |state, mut local_grad| {\n                //state = somma di update di ogni replica/ replica\n                state.iter_count +=1;\n                //each iteration the global_grad must be set to 0 because we must do the cumulative sum of the local gradients\n                state.global_grad = vec![0.;local_grad.len()];\n                let num_replica = 1; //?????????????????\n                state.global_grad = state.global_grad.iter().zip(local_grad.iter()).map(|(a, b)| (a + b)/(batch_size * num_replica) as f64).collect();\n                state.weights = state.weights.iter().zip(state.global_grad.iter()).map(|(beta, g)| beta - g * learn_rate).collect();\n            }, /* loop_condition */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this method takes 6 arguments but 5 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:78:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m78\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        .replay(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m__________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m79\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            num_iters,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m80\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            initial_state,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m81\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            |s, state| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14man argument is missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\foxfo\\.cargo\\git\\checkouts\\noir-7e40c96ce7738426\\013b336\\src\\operator\\iteration\\replay.rs:254:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m254\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn replay<\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m78\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        .replay\u001b[0m\u001b[0m\u001b[38;5;10m(num_iters, initial_state, |s, state| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m79\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                s.shuffle().rich_filter_map({\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m80\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 let mut count = 0;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m81\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 move |x|{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m82\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     count+=1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m83\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     if count<=batch_size { Some(x) }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m84\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     else{ None }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m85\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 }})\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m86\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                .rich_map({\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     move |x|{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m88\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         let sample_grad;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         if let Some(y)=x.pop(){ \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m90\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             x.push(1.);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             let current_weights = &state.get().weights;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             let prediction: f64 = x.iter().zip(current_weights.iter()).map(|(a, b)| a * b).sum();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m93\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             let error = y-prediction;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             sample_grad = x.iter().map(|v| v * error).collect();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m96\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         sample_grad\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m97\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m98\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m99\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+             }, |local_grad: &mut Vec<f64>, sample_grad| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 local_grad.extend(vec![0.; sample_grad.len()]);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 *local_grad = local_grad.iter().zip(sample_grad.iter()).map(|(a, b)| (a + b)).collect();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             }, move |state, mut local_grad| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 //state = somma di update di ogni replica/ replica\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 state.iter_count +=1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 //each iteration the global_grad must be set to 0 because we must do the cumulative sum of the local gradients\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 state.global_grad = vec![0.;local_grad.len()];\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m108\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 let num_replica = 1; //?????????????????\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 state.global_grad = state.global_grad.iter().zip(local_grad.iter()).map(|(a, b)| (a + b)/(batch_size * num_replica) as f64).collect();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 state.weights = state.weights.iter().zip(state.global_grad.iter()).map(|(beta, g)| beta - g * learn_rate).collect();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             }, /* loop_condition */)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"`State` doesn't implement `Debug`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":4749,"byte_end":4767,"line_start":130,"line_end":130,"column_start":19,"column_end":37,"is_primary":true,"text":[{"text":"    print!(\"{:?}\",res.get().unwrap());","highlight_start":19,"highlight_end":37}],"label":"`State` cannot be formatted using `{:?}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\foxfo\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\std\\src\\macros.rs","byte_start":2440,"byte_end":2470,"line_start":81,"line_end":81,"column_start":28,"column_end":58,"is_primary":false,"text":[{"text":"        $crate::io::_print($crate::format_args!($($arg)*));","highlight_start":28,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\main.rs","byte_start":4735,"byte_end":4768,"line_start":130,"line_end":130,"column_start":5,"column_end":38,"is_primary":false,"text":[{"text":"    print!(\"{:?}\",res.get().unwrap());","highlight_start":5,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"print!","def_site_span":{"file_name":"C:\\Users\\foxfo\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\std\\src\\macros.rs","byte_start":2368,"byte_end":2386,"line_start":79,"line_end":79,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! print {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"C:\\Users\\foxfo\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs","byte_start":30016,"byte_end":30040,"line_start":877,"line_end":877,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `Debug` is not implemented for `State`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `#[derive(Debug)]` to `State` or manually `impl Debug for State`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the trait `Debug` is implemented for `Vec<T, A>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider annotating `State` with `#[derive(Debug)]`","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":198,"byte_end":198,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"struct State {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"#[derive(Debug)]\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `State` doesn't implement `Debug`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:130:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    print!(\"{:?}\",res.get().unwrap());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`State` cannot be formatted using `{:?}`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `Debug` is not implemented for `State`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: add `#[derive(Debug)]` to `State` or manually `impl Debug for State`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `Debug` \u001b[0m\u001b[0m\u001b[1mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1mVec<T, A>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::format_args` which comes from the expansion of the macro `print` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider annotating `State` with `#[derive(Debug)]`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10m#[derive(Debug)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0061, E0277.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0061, E0277.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0061`.\u001b[0m\n"}
